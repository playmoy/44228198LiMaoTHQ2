{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Q3(a) \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "dataset=pd.read_csv('/Users/daisydu/Downloads/student_results.csv')\n",
    "\n",
    "##use read_csv to read the .csv file and name it \"dataset\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID number</th>\n",
       "      <th>Assessment 1</th>\n",
       "      <th>Assessment 2</th>\n",
       "      <th>Online quiz 1</th>\n",
       "      <th>Online quiz 2</th>\n",
       "      <th>Online quiz 3</th>\n",
       "      <th>Online quiz 4</th>\n",
       "      <th>Group assignment 1</th>\n",
       "      <th>Group assignment 2</th>\n",
       "      <th>Assessment 3</th>\n",
       "      <th>Assessment 4</th>\n",
       "      <th>Group assignment 3</th>\n",
       "      <th>Group evaluation</th>\n",
       "      <th>Final exam</th>\n",
       "      <th>Class No</th>\n",
       "      <th>groupname</th>\n",
       "      <th>Student category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>54002768</td>\n",
       "      <td>17.21</td>\n",
       "      <td>24.19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>15.00</td>\n",
       "      <td>18.92</td>\n",
       "      <td>26.57</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.00</td>\n",
       "      <td>69</td>\n",
       "      <td>9</td>\n",
       "      <td>cl9tg2</td>\n",
       "      <td>domestic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54005658</td>\n",
       "      <td>66.50</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.0</td>\n",
       "      <td>18.14</td>\n",
       "      <td>29.00</td>\n",
       "      <td>19.91</td>\n",
       "      <td>22.35</td>\n",
       "      <td>17.04</td>\n",
       "      <td>60.54</td>\n",
       "      <td>24.07</td>\n",
       "      <td>42.5</td>\n",
       "      <td>1.88</td>\n",
       "      <td>63</td>\n",
       "      <td>2</td>\n",
       "      <td>cl2tg8</td>\n",
       "      <td>domestic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>54010438</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.13</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>43.75</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>cl3tg7</td>\n",
       "      <td>international</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54011658</td>\n",
       "      <td>60.67</td>\n",
       "      <td>29.07</td>\n",
       "      <td>27.5</td>\n",
       "      <td>18.40</td>\n",
       "      <td>24.50</td>\n",
       "      <td>18.52</td>\n",
       "      <td>25.00</td>\n",
       "      <td>19.29</td>\n",
       "      <td>66.11</td>\n",
       "      <td>27.61</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>75</td>\n",
       "      <td>20</td>\n",
       "      <td>cl20tg2</td>\n",
       "      <td>domestic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54012789</td>\n",
       "      <td>37.33</td>\n",
       "      <td>29.01</td>\n",
       "      <td>11.0</td>\n",
       "      <td>20.00</td>\n",
       "      <td>19.50</td>\n",
       "      <td>19.10</td>\n",
       "      <td>27.75</td>\n",
       "      <td>17.82</td>\n",
       "      <td>55.61</td>\n",
       "      <td>19.21</td>\n",
       "      <td>42.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>33</td>\n",
       "      <td>19</td>\n",
       "      <td>cl19tg6</td>\n",
       "      <td>domestic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID number  Assessment 1  Assessment 2  Online quiz 1   Online quiz 2  \\\n",
       "0   54002768         17.21         24.19             0.0           0.00   \n",
       "1   54005658         66.50          0.00            22.0          18.14   \n",
       "2   54010438          0.00          0.00             0.0           0.00   \n",
       "3   54011658         60.67         29.07            27.5          18.40   \n",
       "4   54012789         37.33         29.01            11.0          20.00   \n",
       "\n",
       "   Online quiz 3  Online quiz 4  Group assignment 1  Group assignment 2  \\\n",
       "0          15.00          18.92               26.57                0.00   \n",
       "1          29.00          19.91               22.35               17.04   \n",
       "2           4.13           0.00               18.86                0.00   \n",
       "3          24.50          18.52               25.00               19.29   \n",
       "4          19.50          19.10               27.75               17.82   \n",
       "\n",
       "   Assessment 3  Assessment 4  Group assignment 3   Group evaluation  \\\n",
       "0          0.00          0.00                50.0               2.00   \n",
       "1         60.54         24.07                42.5               1.88   \n",
       "2         43.75          0.00                22.5               0.00   \n",
       "3         66.11         27.61                35.0               1.72   \n",
       "4         55.61         19.21                42.5               2.00   \n",
       "\n",
       "   Final exam  Class No groupname Student category  \n",
       "0          69         9    cl9tg2         domestic  \n",
       "1          63         2    cl2tg8         domestic  \n",
       "2          15         3    cl3tg7    international  \n",
       "3          75        20   cl20tg2         domestic  \n",
       "4          33        19   cl19tg6         domestic  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## b\n",
    "dataset.fillna(0,inplace=True)\n",
    "dataset.head()\n",
    "\n",
    "##use fillna() to replace all the NAN values with 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "##c.\n",
    "weights=[[0.07/70],[0.03/30],[0.03/30],[0.02/20],[0.03/30],[0.02/20],[0.024/30],[0.016/20],[0.07/70],[0.03/30],[0.04/50],[0.02/2],[0.6/100]]\n",
    "dataset['Total.marks']=np.dot(dataset.iloc[:,1:14], weights)*100\n",
    "\n",
    "##Set the weights for scores in each exam according to table 1\n",
    "##Use np.dot to calculate the weighted average points for each student and name it \"Total.marks\".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a12998a10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##c.continue\n",
    "import seaborn as sb\n",
    "boxplot=sb.boxplot(data=dataset,y='Total.marks',x='Student category')\n",
    "\n",
    "## use seaborn.boxplot to plot the variable 'Total.marks' for the two student categories.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">Total.marks</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>var</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Class No</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>59.280813</td>\n",
       "      <td>242.710561</td>\n",
       "      <td>15.579171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60.671069</td>\n",
       "      <td>160.151821</td>\n",
       "      <td>12.655110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>57.610713</td>\n",
       "      <td>273.495919</td>\n",
       "      <td>16.537712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.220069</td>\n",
       "      <td>319.034109</td>\n",
       "      <td>17.861526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>57.918085</td>\n",
       "      <td>383.676678</td>\n",
       "      <td>19.587666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>62.332600</td>\n",
       "      <td>252.025294</td>\n",
       "      <td>15.875305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>54.879626</td>\n",
       "      <td>344.554792</td>\n",
       "      <td>18.562187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>54.384800</td>\n",
       "      <td>358.580091</td>\n",
       "      <td>18.936211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>53.918419</td>\n",
       "      <td>205.356479</td>\n",
       "      <td>14.330264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>59.459821</td>\n",
       "      <td>286.748324</td>\n",
       "      <td>16.933645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>53.123421</td>\n",
       "      <td>333.302820</td>\n",
       "      <td>18.256583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>57.040716</td>\n",
       "      <td>239.145724</td>\n",
       "      <td>15.464337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>57.521067</td>\n",
       "      <td>221.097589</td>\n",
       "      <td>14.869351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>61.211431</td>\n",
       "      <td>179.019517</td>\n",
       "      <td>13.379818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>56.857269</td>\n",
       "      <td>238.727958</td>\n",
       "      <td>15.450824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>59.823636</td>\n",
       "      <td>242.163125</td>\n",
       "      <td>15.561591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>56.263841</td>\n",
       "      <td>95.438828</td>\n",
       "      <td>9.769280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>55.022638</td>\n",
       "      <td>210.342787</td>\n",
       "      <td>14.503199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>55.151473</td>\n",
       "      <td>247.260917</td>\n",
       "      <td>15.724532</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Total.marks                       \n",
       "                mean         var        std\n",
       "Class No                                   \n",
       "1          59.280813  242.710561  15.579171\n",
       "2          60.671069  160.151821  12.655110\n",
       "3          57.610713  273.495919  16.537712\n",
       "4          56.220069  319.034109  17.861526\n",
       "5          57.918085  383.676678  19.587666\n",
       "6          62.332600  252.025294  15.875305\n",
       "7          54.879626  344.554792  18.562187\n",
       "8          54.384800  358.580091  18.936211\n",
       "9          53.918419  205.356479  14.330264\n",
       "10         59.459821  286.748324  16.933645\n",
       "11         53.123421  333.302820  18.256583\n",
       "12         57.040716  239.145724  15.464337\n",
       "15         57.521067  221.097589  14.869351\n",
       "16         61.211431  179.019517  13.379818\n",
       "17         56.857269  238.727958  15.450824\n",
       "18         59.823636  242.163125  15.561591\n",
       "19         56.263841   95.438828   9.769280\n",
       "20         55.022638  210.342787  14.503199\n",
       "21         55.151473  247.260917  15.724532"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##d.\n",
    "stat_table = dataset.groupby('Class No').agg({\"Total.marks\": ['mean', 'var', 'std']})\n",
    "stat_table\n",
    "\n",
    "##Group the variable 'Total.marks' according to the variable 'Class No' and calculate the mean, variance \n",
    "##and standeviation and print it out.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID number</th>\n",
       "      <th>Assessment 1</th>\n",
       "      <th>Assessment 2</th>\n",
       "      <th>Online quiz 1</th>\n",
       "      <th>Online quiz 2</th>\n",
       "      <th>Online quiz 3</th>\n",
       "      <th>Online quiz 4</th>\n",
       "      <th>Group assignment 1</th>\n",
       "      <th>Group assignment 2</th>\n",
       "      <th>Assessment 3</th>\n",
       "      <th>Assessment 4</th>\n",
       "      <th>Group assignment 3</th>\n",
       "      <th>Group evaluation</th>\n",
       "      <th>Final exam</th>\n",
       "      <th>Class No</th>\n",
       "      <th>groupname</th>\n",
       "      <th>Student category</th>\n",
       "      <th>Total.marks</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>54002768</td>\n",
       "      <td>17.21</td>\n",
       "      <td>24.19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>15.00</td>\n",
       "      <td>18.92</td>\n",
       "      <td>26.57</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.00</td>\n",
       "      <td>69</td>\n",
       "      <td>9</td>\n",
       "      <td>cl9tg2</td>\n",
       "      <td>domestic</td>\n",
       "      <td>57.0576</td>\n",
       "      <td>P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54005658</td>\n",
       "      <td>66.50</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.0</td>\n",
       "      <td>18.14</td>\n",
       "      <td>29.00</td>\n",
       "      <td>19.91</td>\n",
       "      <td>22.35</td>\n",
       "      <td>17.04</td>\n",
       "      <td>60.54</td>\n",
       "      <td>24.07</td>\n",
       "      <td>42.5</td>\n",
       "      <td>1.88</td>\n",
       "      <td>63</td>\n",
       "      <td>2</td>\n",
       "      <td>cl2tg8</td>\n",
       "      <td>domestic</td>\n",
       "      <td>70.2472</td>\n",
       "      <td>Cr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>54010438</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.13</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>43.75</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>cl3tg7</td>\n",
       "      <td>international</td>\n",
       "      <td>17.0968</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54011658</td>\n",
       "      <td>60.67</td>\n",
       "      <td>29.07</td>\n",
       "      <td>27.5</td>\n",
       "      <td>18.40</td>\n",
       "      <td>24.50</td>\n",
       "      <td>18.52</td>\n",
       "      <td>25.00</td>\n",
       "      <td>19.29</td>\n",
       "      <td>66.11</td>\n",
       "      <td>27.61</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>75</td>\n",
       "      <td>20</td>\n",
       "      <td>cl20tg2</td>\n",
       "      <td>domestic</td>\n",
       "      <td>80.3012</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54012789</td>\n",
       "      <td>37.33</td>\n",
       "      <td>29.01</td>\n",
       "      <td>11.0</td>\n",
       "      <td>20.00</td>\n",
       "      <td>19.50</td>\n",
       "      <td>19.10</td>\n",
       "      <td>27.75</td>\n",
       "      <td>17.82</td>\n",
       "      <td>55.61</td>\n",
       "      <td>19.21</td>\n",
       "      <td>42.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>33</td>\n",
       "      <td>19</td>\n",
       "      <td>cl19tg6</td>\n",
       "      <td>domestic</td>\n",
       "      <td>49.9216</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID number  Assessment 1  Assessment 2  Online quiz 1   Online quiz 2  \\\n",
       "0   54002768         17.21         24.19             0.0           0.00   \n",
       "1   54005658         66.50          0.00            22.0          18.14   \n",
       "2   54010438          0.00          0.00             0.0           0.00   \n",
       "3   54011658         60.67         29.07            27.5          18.40   \n",
       "4   54012789         37.33         29.01            11.0          20.00   \n",
       "\n",
       "   Online quiz 3  Online quiz 4  Group assignment 1  Group assignment 2  \\\n",
       "0          15.00          18.92               26.57                0.00   \n",
       "1          29.00          19.91               22.35               17.04   \n",
       "2           4.13           0.00               18.86                0.00   \n",
       "3          24.50          18.52               25.00               19.29   \n",
       "4          19.50          19.10               27.75               17.82   \n",
       "\n",
       "   Assessment 3  Assessment 4  Group assignment 3   Group evaluation  \\\n",
       "0          0.00          0.00                50.0               2.00   \n",
       "1         60.54         24.07                42.5               1.88   \n",
       "2         43.75          0.00                22.5               0.00   \n",
       "3         66.11         27.61                35.0               1.72   \n",
       "4         55.61         19.21                42.5               2.00   \n",
       "\n",
       "   Final exam  Class No groupname Student category  Total.marks Grade  \n",
       "0          69         9    cl9tg2         domestic      57.0576     P  \n",
       "1          63         2    cl2tg8         domestic      70.2472    Cr  \n",
       "2          15         3    cl3tg7    international      17.0968     F  \n",
       "3          75        20   cl20tg2         domestic      80.3012     D  \n",
       "4          33        19   cl19tg6         domestic      49.9216     F  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "####e.\n",
    "Grade = []\n",
    "\n",
    "for s in dataset['Total.marks']:\n",
    "    if s < 50:Grade.append('F')\n",
    "    elif s < 65:Grade.append('P')  \n",
    "    elif s < 75:Grade.append('Cr')\n",
    "    elif s < 85:Grade.append('D') \n",
    "    else:  Grade.append('HD')\n",
    "      \n",
    "dataset['Grade']=Grade        \n",
    "dataset.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "##f.\n",
    "from pandas.core import datetools\n",
    "import statsmodels.api as sm \n",
    "\n",
    "A1 = dataset[\"Assessment 1\"] \n",
    "A1 = sm.add_constant(X)\n",
    "Final = dataset[\"Final exam\"]\n",
    "\n",
    "lm = sm.OLS(Final, A1).fit()\n",
    "\n",
    "\n",
    "##Let the variable 'Assessment 1' be the predictor and the variable 'Final exam' be the response.\n",
    "##Use sm.OLS to perform a simple linear regression.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Final exam</td>    <th>  R-squared:         </th> <td>   0.097</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.095</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   61.55</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Thu, 17 May 2018</td> <th>  Prob (F-statistic):</th> <td>2.11e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>21:18:05</td>     <th>  Log-Likelihood:    </th> <td> -2498.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   578</td>      <th>  AIC:               </th> <td>   5001.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   576</td>      <th>  BIC:               </th> <td>   5010.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>        <td>   37.0586</td> <td>    1.824</td> <td>   20.320</td> <td> 0.000</td> <td>   33.477</td> <td>   40.641</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Assessment 1</th> <td>    0.2769</td> <td>    0.035</td> <td>    7.845</td> <td> 0.000</td> <td>    0.208</td> <td>    0.346</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.182</td> <th>  Durbin-Watson:     </th> <td>   1.887</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.336</td> <th>  Jarque-Bera (JB):  </th> <td>   2.245</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.146</td> <th>  Prob(JB):          </th> <td>   0.326</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.908</td> <th>  Cond. No.          </th> <td>    124.</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:             Final exam   R-squared:                       0.097\n",
       "Model:                            OLS   Adj. R-squared:                  0.095\n",
       "Method:                 Least Squares   F-statistic:                     61.55\n",
       "Date:                Thu, 17 May 2018   Prob (F-statistic):           2.11e-14\n",
       "Time:                        21:18:05   Log-Likelihood:                -2498.6\n",
       "No. Observations:                 578   AIC:                             5001.\n",
       "Df Residuals:                     576   BIC:                             5010.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "const           37.0586      1.824     20.320      0.000      33.477      40.641\n",
       "Assessment 1     0.2769      0.035      7.845      0.000       0.208       0.346\n",
       "==============================================================================\n",
       "Omnibus:                        2.182   Durbin-Watson:                   1.887\n",
       "Prob(Omnibus):                  0.336   Jarque-Bera (JB):                2.245\n",
       "Skew:                           0.146   Prob(JB):                        0.326\n",
       "Kurtosis:                       2.908   Cond. No.                         124.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.summary()\n",
    "\n",
    "## Get a summary of the linear model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "## g.\n",
    "vs = dataset[['Assessment 1', 'Assessment 3', 'Online quiz 1 ', 'Group assignment 2']]\n",
    "vs = sm.add_constant(vs)\n",
    "mm = sm.OLS(Final, vs).fit()\n",
    "\n",
    "## This time, let four variables,'Assessment 1', 'Assessment 3', 'Online quiz 1 ' and 'Group assignment 2' \n",
    "## be predictors and still set the variable 'Final exam' as response and use sm.OLS to run a multiple regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Final exam</td>    <th>  R-squared:         </th> <td>   0.169</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.163</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   29.05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Thu, 17 May 2018</td> <th>  Prob (F-statistic):</th> <td>5.21e-22</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>21:23:29</td>     <th>  Log-Likelihood:    </th> <td> -2474.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   578</td>      <th>  AIC:               </th> <td>   4959.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   573</td>      <th>  BIC:               </th> <td>   4981.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     4</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>   25.8300</td> <td>    2.377</td> <td>   10.866</td> <td> 0.000</td> <td>   21.161</td> <td>   30.499</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Assessment 1</th>       <td>    0.1571</td> <td>    0.039</td> <td>    4.042</td> <td> 0.000</td> <td>    0.081</td> <td>    0.233</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Assessment 3</th>       <td>    0.2030</td> <td>    0.048</td> <td>    4.222</td> <td> 0.000</td> <td>    0.109</td> <td>    0.297</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Online quiz 1 </th>     <td>    0.1465</td> <td>    0.102</td> <td>    1.439</td> <td> 0.151</td> <td>   -0.053</td> <td>    0.346</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Group assignment 2</th> <td>    0.3466</td> <td>    0.103</td> <td>    3.377</td> <td> 0.001</td> <td>    0.145</td> <td>    0.548</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 4.648</td> <th>  Durbin-Watson:     </th> <td>   1.910</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.098</td> <th>  Jarque-Bera (JB):  </th> <td>   4.716</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.218</td> <th>  Prob(JB):          </th> <td>  0.0946</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.922</td> <th>  Cond. No.          </th> <td>    242.</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:             Final exam   R-squared:                       0.169\n",
       "Model:                            OLS   Adj. R-squared:                  0.163\n",
       "Method:                 Least Squares   F-statistic:                     29.05\n",
       "Date:                Thu, 17 May 2018   Prob (F-statistic):           5.21e-22\n",
       "Time:                        21:23:29   Log-Likelihood:                -2474.6\n",
       "No. Observations:                 578   AIC:                             4959.\n",
       "Df Residuals:                     573   BIC:                             4981.\n",
       "Df Model:                           4                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                 25.8300      2.377     10.866      0.000      21.161      30.499\n",
       "Assessment 1           0.1571      0.039      4.042      0.000       0.081       0.233\n",
       "Assessment 3           0.2030      0.048      4.222      0.000       0.109       0.297\n",
       "Online quiz 1          0.1465      0.102      1.439      0.151      -0.053       0.346\n",
       "Group assignment 2     0.3466      0.103      3.377      0.001       0.145       0.548\n",
       "==============================================================================\n",
       "Omnibus:                        4.648   Durbin-Watson:                   1.910\n",
       "Prob(Omnibus):                  0.098   Jarque-Bera (JB):                4.716\n",
       "Skew:                           0.218   Prob(JB):                       0.0946\n",
       "Kurtosis:                       2.922   Cond. No.                         242.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mm.summary()\n",
    "##Print out the summary of this model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      complete\n",
       "1      complete\n",
       "2    incomplete\n",
       "3      complete\n",
       "4    incomplete\n",
       "Name: Status, dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##h.\n",
    "Status=[]\n",
    "\n",
    "for f in dataset['Total.marks']:\n",
    "    if f < 50:\n",
    "        Status.append('incomplete')\n",
    "    else:\n",
    "        Status.append('complete')\n",
    "\n",
    "dataset['Status']=Status\n",
    "        \n",
    "dataset['Status'].head()\n",
    "\n",
    "##In this part, use the same method applied in part e, i.e.,if the value of 'Total.marks' is smaller than 60 \n",
    "##(not equal), the variable 'Status' will show 'incomplete' and 'complete' otherwise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "##h.continue\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "dummy=pd.get_dummies(dataset['Status'])['complete']\n",
    "y_train=dummy[0:100]\n",
    "x_train=dataset['Assessment 3'][0:100]\n",
    "x_train = sm.add_constant (x_train)\n",
    "\n",
    "\n",
    "##Use dummy to convert the 'Status' to the numerical type and thus it could be modeled.\n",
    "##Use pd.get_dummies to give dummy variables for variable 'Status-complete', i.e., if 'Status' is complete, give a\n",
    "##value of 1 as the dummy variable.\n",
    "##Use the dummy variable as response and use the variable 'Assessment 3' as the predictors.\n",
    "##Use the first 100 data as training data to run the logistic regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "##h.continue\n",
    "##all parameters not specified are set to their defaults\n",
    "logisticRegr = LogisticRegression()\n",
    "logfit=logisticRegr.fit(x_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1,\n",
       "       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n",
       "       1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n",
       "       1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n",
       "       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0,\n",
       "       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n",
       "       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=uint8)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##h.continue\n",
    "y_test=dummy[100:,]\n",
    "x_test=dataset['Assessment 3'][100:,]\n",
    "x_test = sm.add_constant (x_test)\n",
    "pred = logisticRegr.predict(x_test)\n",
    "pred\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7824267782426778\n"
     ]
    }
   ],
   "source": [
    "##h.continue\n",
    "##Use score method to get accuracy of model\n",
    "score = logisticRegr.score(x_test, y_test)\n",
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 35  90]\n",
      " [ 14 339]]\n"
     ]
    }
   ],
   "source": [
    "x_test=dataset['Assessment 3'][100:,]\n",
    "x_test = sm.add_constant (x_test)\n",
    "\n",
    "from sklearn import metrics\n",
    "cm = metrics.confusion_matrix(y_test, pred)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
